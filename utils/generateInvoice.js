const fs = require("fs");
const path = require("path");
const PDFDocument = require("pdfkit");
const QRCode = require("qrcode");

const generateInvoice = async (booking, listing, guest) => {
  return new Promise(async (resolve, reject) => {
    const invoiceDir = path.join(__dirname, "../invoices");
    if (!fs.existsSync(invoiceDir))
      fs.mkdirSync(invoiceDir, { recursive: true });

    const filePath = path.join(invoiceDir, `invoice-${booking._id}.pdf`);
    const qrPath = path.join(invoiceDir, `qr-${booking._id}.png`);
    const doc = new PDFDocument({ size: "A4", margin: 50 });

    const stream = fs.createWriteStream(filePath);
    doc.pipe(stream);

    // ✅ Load Bangla font if available
    const banglaFontPath = path.join(
      __dirname,
      "../fonts/NotoSansBengali-VariableFont_wdth,wght.ttf"
    );
    if (fs.existsSync(banglaFontPath)) {
      doc.registerFont("Bangla", banglaFontPath);
    }

    // ✅ Add logo
    const logoPath = path.join(__dirname, "../assets/banglabnb-logo.png");
    if (fs.existsSync(logoPath)) {
      doc.image(logoPath, 50, 50, { width: 100 });
    }

    doc
      .fillColor("#006a4e")
      .fontSize(22)
      .text("BanglaBnB", 200, 50, { align: "right" })
      .fontSize(14)
      .fillColor("#d21034")
      .text("📄 Booking Invoice", { align: "right" });

    doc.moveDown().moveTo(50, doc.y).lineTo(550, doc.y).stroke();

    const nights = Math.ceil(
      (new Date(booking.dateTo) - new Date(booking.dateFrom)) /
        (1000 * 60 * 60 * 24)
    );
    const baseRate = listing.price;
    const serviceFee = 100;
    const total = baseRate * nights + serviceFee;

    const formatCurrency = (value) => `BDT${value.toFixed(2)}`;

    doc
      .moveDown()
      .fillColor("black")
      .fontSize(12)
      .text(`Booking ID: ${booking._id}`)
      .text(`Guest: ${guest.name} (${guest.email})`)
      .text(`Listing: ${listing.title}`)
      .text(`Location: ${listing.location?.address}`)
      .text(
        `Dates: ${new Date(booking.dateFrom).toLocaleDateString()} → ${new Date(
          booking.dateTo
        ).toLocaleDateString()}`
      )
      .text(`Payment Status: ${booking.paymentStatus}`)
      .moveDown();

    // Bangla Translation
    doc
      .font("Bangla")
      .fillColor("#333")
      .fontSize(11)
      .text(`অতিথি: ${guest.name}`, { continued: true })
      .text(`  •  মেইল: ${guest.email}`)
      .text(`স্থান: ${listing.location?.address}`)
      .text(
        `তারিখ: ${new Date(booking.dateFrom).toLocaleDateString()} → ${new Date(
          booking.dateTo
        ).toLocaleDateString()}`
      )
      .moveDown();

    // 💵 Price Breakdown (aligned like columns)
    const labelX = 50;
    const valueX = 450;
    doc
      .font("Helvetica")
      .fillColor("black")
      .fontSize(13)
      .text("💵 Price Breakdown", labelX, doc.y, { underline: true });

    doc
      .fontSize(12)
      .text(
        `Nightly Rate (BDT${baseRate} x ${nights} nights):`,
        labelX,
        doc.y + 10
      )
      .text(formatCurrency(baseRate * nights), valueX, doc.y);

    doc
      .text("Service Fee:", labelX, doc.y + 10)
      .text(formatCurrency(serviceFee), valueX, doc.y);

    doc
      .font("Helvetica-Bold")
      .text("Total Amount Paid:", labelX, doc.y + 10)
      .text(formatCurrency(total), valueX, doc.y);

    // Invoice Number & Date
    doc.moveDown(2).font("Helvetica").fontSize(11).fillColor("gray");
    doc.text(`Invoice Number: INV-${booking._id}`);
    doc.text(`Issued on: ${new Date().toLocaleDateString()}`);

    // Generate QR
    await QRCode.toFile(
      qrPath,
      `https://banglabnb.com/bookings/${booking._id}`,
      { width: 100 }
    );
    doc.image(qrPath, 450, doc.y - 40, { width: 80 });

    // Footer
    doc.moveDown(4);
    doc
      .fontSize(10)
      .fillColor("gray")
      .text("This invoice was automatically generated by BanglaBnB", {
        align: "center",
      });

    doc.end();

    stream.on("finish", () => {
      resolve(filePath);
      fs.unlink(qrPath, () => {});
    });

    stream.on("error", reject);
  });
};

module.exports = generateInvoice;
