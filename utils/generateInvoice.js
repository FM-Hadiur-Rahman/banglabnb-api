const fs = require("fs");
const path = require("path");
const PDFDocument = require("pdfkit");

const generateInvoice = async (booking, listing, guest) => {
  return new Promise((resolve, reject) => {
    const invoiceDir = path.join(__dirname, "../invoices");
    if (!fs.existsSync(invoiceDir))
      fs.mkdirSync(invoiceDir, { recursive: true });

    const filePath = path.join(invoiceDir, `invoice-${booking._id}.pdf`);
    const doc = new PDFDocument({ size: "A4", margin: 50 });
    const stream = fs.createWriteStream(filePath);
    doc.pipe(stream);

    // Colors
    const green = "#006a4e";
    const red = "#e53935";

    // Header Background
    doc
      .rect(0, 0, doc.page.width, 100)
      .fill(green)
      .fillColor("white")
      .fontSize(28)
      .text("INVOICE", 50, 40);

    // Logo (optional)
    const logoPath = path.join(__dirname, "../assets/banglabnb-logo.png");
    if (fs.existsSync(logoPath)) {
      doc.image(logoPath, 450, 30, { width: 100 });
    }

    // Guest Info
    doc
      .fillColor("black")
      .fontSize(12)
      .text(`Booking ID: ${booking._id}`, 50, 120)
      .text(`Guest: ${guest.name} (${guest.email})`)
      .text(`Listing: ${listing.title}`)
      .text(`Location: ${listing.location?.address}`)
      .text(
        `Dates: ${new Date(booking.dateFrom).toLocaleDateString()} â†’ ${new Date(
          booking.dateTo
        ).toLocaleDateString()}`
      );

    // Divider
    doc
      .moveDown()
      .moveTo(50, doc.y)
      .lineTo(550, doc.y)
      .strokeColor(green)
      .stroke();

    // Pricing
    const nights =
      (new Date(booking.dateTo) - new Date(booking.dateFrom)) /
      (1000 * 60 * 60 * 24);
    const baseRate = listing.price;
    const serviceFee = 100;
    const total = baseRate * nights + serviceFee;

    const formatCurrency = (val) => `à§³${val.toFixed(2)}`;

    doc
      .moveDown(1)
      .fontSize(14)
      .fillColor(red)
      .text("ðŸ’µ Price Breakdown", { underline: true });

    doc
      .fillColor("black")
      .fontSize(12)
      .text(`Nightly Rate (à§³${baseRate} x ${nights} nights):`, 50)
      .text(formatCurrency(baseRate * nights), 0, doc.y, { align: "right" })
      .text("Service Fee:", 50)
      .text(formatCurrency(serviceFee), 0, doc.y, { align: "right" })
      .text("Total Amount Paid:", 50)
      .font("Helvetica-Bold")
      .fillColor(red)
      .text(formatCurrency(total), 0, doc.y, { align: "right" })
      .font("Helvetica")
      .fillColor("black");

    // Footer
    doc.moveDown(2);
    doc
      .fontSize(10)
      .fillColor("gray")
      .text("This invoice was automatically generated by BanglaBnB", {
        align: "center",
      });

    doc.end();
    stream.on("finish", () => resolve(filePath));
    stream.on("error", reject);
  });
};

module.exports = generateInvoice;
