const fs = require("fs");
const path = require("path");
const PDFDocument = require("pdfkit");
const QRCode = require("qrcode");
const { cloudinary } = require("../config/cloudinary");

const generateInvoice = async (booking, listing, guest) => {
  return new Promise(async (resolve, reject) => {
    const invoiceDir = path.join(__dirname, "../invoices");
    if (!fs.existsSync(invoiceDir))
      fs.mkdirSync(invoiceDir, { recursive: true });

    const fileName = `invoice-${booking._id}.pdf`;
    const filePath = path.join(invoiceDir, fileName);
    const doc = new PDFDocument({ size: "A4", margin: 50 });
    const stream = fs.createWriteStream(filePath);
    doc.pipe(stream);

    // üñº Add Logo
    const logoPath = path.join(__dirname, "../assets/banglabnb-logo.png");
    if (fs.existsSync(logoPath)) {
      doc.image(logoPath, 50, 45, { width: 120 });
    }

    // üü¢ Invoice Header with BD Flag Colors
    doc
      .fillColor("#006a4e") // dark green
      .fontSize(22)
      .font("Helvetica-Bold")
      .text("BanglaBnB", 200, 50, { align: "right" })
      .fontSize(14)
      .fillColor("#e62e04") // red
      .text("üìÑ Booking Invoice / ‡¶¨‡ßÅ‡¶ï‡¶ø‡¶Ç ‡¶ö‡¶æ‡¶≤‡¶æ‡¶®", { align: "right" })
      .moveDown();

    doc.moveDown(1);
    doc.moveTo(50, doc.y).lineTo(550, doc.y).stroke();

    // üî¢ Invoice Info
    doc
      .fontSize(12)
      .fillColor("black")
      .text(`Invoice #: ${booking._id}`)
      .text(`‡¶ö‡¶æ‡¶≤‡¶æ‡¶® ‡¶®‡¶Æ‡ßç‡¶¨‡¶∞‡¶É ${booking._id}`)
      .text(`Status: ${booking.paymentStatus || "unpaid"}`)
      .text(
        `‡¶Ö‡¶¨‡¶∏‡ßç‡¶•‡¶æ: ${booking.paymentStatus === "paid" ? "‡¶™‡¶∞‡¶ø‡¶∂‡ßã‡¶ß‡¶ø‡¶§" : "‡¶Ö‡¶™‡¶∞‡¶ø‡¶∂‡ßã‡¶ß‡¶ø‡¶§"}`
      )
      .moveDown();

    // üë§ Guest Info
    doc
      .text(`Guest: ${guest.name} (${guest.email})`)
      .text(`‡¶Ö‡¶§‡¶ø‡¶•‡¶ø‡¶É ${guest.name}`)
      .text(`Listing: ${listing.title}`)
      .text(`‡¶∏‡ßç‡¶•‡¶æ‡¶®‡¶É ${listing.location?.address}`)
      .text(
        `Dates: ${new Date(booking.dateFrom).toLocaleDateString()} ‚Üí ${new Date(
          booking.dateTo
        ).toLocaleDateString()}`
      )
      .text(
        `‡¶§‡¶æ‡¶∞‡¶ø‡¶ñ‡¶É ${new Date(booking.dateFrom).toLocaleDateString(
          "bn-BD"
        )} ‚Üí ${new Date(booking.dateTo).toLocaleDateString("bn-BD")}`
      )
      .moveDown();

    doc.moveTo(50, doc.y).lineTo(550, doc.y).stroke();

    // üíµ Pricing Summary
    const nights =
      (new Date(booking.dateTo) - new Date(booking.dateFrom)) /
      (1000 * 60 * 60 * 24);
    const baseRate = listing.price;
    const serviceFee = 100;
    const total = baseRate * nights + serviceFee;

    doc
      .moveDown(1)
      .fontSize(13)
      .text("üíµ Price Breakdown / ‡¶Æ‡ßÇ‡¶≤‡ßç‡¶Ø ‡¶¨‡¶ø‡¶¨‡¶∞‡¶£‡ßÄ", { underline: true });

    const formatCurrency = (val) => `‡ß≥${val.toFixed(2)}`;

    doc
      .fontSize(12)
      .text(`Nightly Rate (‡ß≥${baseRate} x ${nights} nights):`, 50)
      .text(`‡¶™‡ßç‡¶∞‡¶§‡¶ø ‡¶∞‡¶æ‡¶§‡ßá‡¶∞ ‡¶¶‡¶æ‡¶Æ (${nights} ‡¶∞‡¶æ‡¶§):`, 50, doc.y + 15)
      .text(formatCurrency(baseRate * nights), 0, doc.y - 15, {
        align: "right",
      })
      .moveDown(1)
      .text(`Service Fee:`, 50)
      .text(`‡¶∏‡¶æ‡¶∞‡ßç‡¶≠‡¶ø‡¶∏ ‡¶´‡¶ø:`, 50, doc.y + 15)
      .text(formatCurrency(serviceFee), 0, doc.y - 15, { align: "right" })
      .moveDown(1)
      .font("Helvetica-Bold")
      .text(`Total Amount Paid:`, 50)
      .text(`‡¶Æ‡ßã‡¶ü ‡¶™‡¶∞‡¶ø‡¶∂‡ßã‡¶ß‡¶ø‡¶§ ‡¶Ö‡¶∞‡ßç‡¶•‡¶É`, 50, doc.y + 15)
      .text(formatCurrency(total), 0, doc.y - 15, { align: "right" })
      .font("Helvetica")
      .moveDown(2);

    // üì¶ QR Code
    const qrContent = `BanglaBnB Invoice\nBooking ID: ${booking._id}\nGuest: ${
      guest.name
    }\nTotal: ${formatCurrency(total)}`;
    const qrDataURL = await QRCode.toDataURL(qrContent);

    const qrImgPath = path.join(invoiceDir, `qr-${booking._id}.png`);
    const base64Data = qrDataURL.replace(/^data:image\/png;base64,/, "");
    fs.writeFileSync(qrImgPath, base64Data, "base64");

    doc.image(qrImgPath, 400, doc.y, { fit: [120, 120] }).moveDown(2);

    doc
      .fontSize(10)
      .fillColor("gray")
      .text("This invoice was automatically generated by BanglaBnB", {
        align: "center",
      });

    doc.end();

    // Wait for PDF stream
    stream.on("finish", async () => {
      // ‚òÅÔ∏è Upload to Cloudinary
      try {
        const result = await cloudinary.uploader.upload(filePath, {
          folder: "banglabnb/invoices",
          resource_type: "raw", // for PDF
        });
        resolve(result.secure_url);
        fs.unlink(filePath, (err) => {
          if (err) console.warn("‚ö†Ô∏è Could not delete local PDF:", err);
        });

        fs.unlink(qrImgPath, (err) => {
          if (err) console.warn("‚ö†Ô∏è Could not delete QR image:", err);
        });
      } catch (uploadErr) {
        console.error("‚ùå Cloudinary Upload Failed:", uploadErr);
        reject(uploadErr);
      }
    });

    stream.on("error", reject);
  });
};

module.exports = generateInvoice;
