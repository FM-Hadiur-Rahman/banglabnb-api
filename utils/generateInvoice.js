const fs = require("fs");
const path = require("path");
const PDFDocument = require("pdfkit");

const generateInvoice = async (booking, listing, guest) => {
  return new Promise((resolve, reject) => {
    const invoiceDir = path.join(__dirname, "../invoices");
    if (!fs.existsSync(invoiceDir))
      fs.mkdirSync(invoiceDir, { recursive: true });

    const filePath = path.join(invoiceDir, `invoice-${booking._id}.pdf`);
    const doc = new PDFDocument({ size: "A4", margin: 50 });
    const stream = fs.createWriteStream(filePath);
    doc.pipe(stream);

    // ðŸ–¼ Add Logo (replace with your logo path or hosted URL)
    const logoPath = path.join(__dirname, "../assets/banglabnb-logo.png"); // make sure this file exists
    if (fs.existsSync(logoPath)) {
      doc.image(logoPath, 50, 45, { width: 120 });
    }

    // Branding header
    doc
      .fillColor("#1a202c")
      .fontSize(20)
      .text("BanglaBnB", 200, 50, { align: "right" });

    doc
      .fontSize(14)
      .fillColor("#4a5568")
      .text("ðŸ“„ Booking Invoice", { align: "right" })
      .moveDown();

    doc.moveDown(1);
    doc.moveTo(50, doc.y).lineTo(550, doc.y).stroke();

    // Booking & Guest Info
    doc
      .fontSize(12)
      .fillColor("black")
      .text(`Booking ID: ${booking._id}`)
      .text(`Guest: ${guest.name} (${guest.email})`)
      .text(`Listing: ${listing.title}`)
      .text(`Location: ${listing.location?.address}`)
      .text(
        `Dates: ${new Date(booking.dateFrom).toLocaleDateString()} â†’ ${new Date(
          booking.dateTo
        ).toLocaleDateString()}`
      )
      .moveDown();

    doc.moveTo(50, doc.y).lineTo(550, doc.y).stroke();

    // ðŸ’µ Pricing Summary Table
    const nights =
      (new Date(booking.dateTo) - new Date(booking.dateFrom)) /
      (1000 * 60 * 60 * 24);
    const baseRate = listing.price;
    const serviceFee = 100; // you can make this dynamic
    const total = baseRate * nights + serviceFee;

    doc
      .moveDown(1)
      .fontSize(13)
      .text("ðŸ’µ Price Breakdown:", { underline: true });

    const formatCurrency = (value) => `à§³${value.toFixed(2)}`;

    doc
      .moveDown(0.5)
      .fontSize(12)
      .text(`Nightly Rate (à§³${baseRate} x ${nights} nights):`, 50)
      .text(formatCurrency(baseRate * nights), 0, doc.y, { align: "right" })
      .text("Service Fee:", 50)
      .text(formatCurrency(serviceFee), 0, doc.y, { align: "right" })
      .text("Total Amount Paid:", 50, doc.y + 5)
      .font("Helvetica-Bold")
      .text(formatCurrency(total), 0, doc.y + 5, { align: "right" })
      .font("Helvetica");

    doc.moveDown(2);
    doc
      .fontSize(10)
      .fillColor("gray")
      .text("This invoice was automatically generated by BanglaBnB", {
        align: "center",
      });

    doc.end();
    stream.on("finish", () => resolve(filePath));
    stream.on("error", reject);
  });
};

module.exports = generateInvoice;
